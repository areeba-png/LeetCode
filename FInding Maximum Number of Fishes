public class Solution {
    private int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int findMaxFish(int[][] grid) {
        int maxFish = 0;
        int m = grid.length;
        int n = grid[0].length;
        
        boolean[][] visited = new boolean[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0 && !visited[i][j]) {
                    maxFish = Math.max(maxFish, dfs(grid, visited, i, j));
                }
            }
        }
        
        return maxFish;
    }
    
    private int dfs(int[][] grid, boolean[][] visited, int r, int c) {
        int m = grid.length;
        int n = grid[0].length;
        
        visited[r][c] = true;
        int fishCount = grid[r][c];
        
        for (int[] dir : directions) {
            int newR = r + dir[0];
            int newC = c + dir[1];
            
            if (newR >= 0 && newR < m && newC >= 0 && newC < n && grid[newR][newC] > 0 && !visited[newR][newC]) {
                fishCount += dfs(grid, visited, newR, newC);
            }
        }
        
        return fishCount;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test cases
        int[][] grid1 = {
            {0, 2, 1, 0},
            {4, 0, 0, 3},
            {1, 0, 0, 4},
            {0, 3, 2, 0}
        };
        System.out.println(solution.findMaxFish(grid1)); // Expected: 7

        int[][] grid2 = {
            {1, 0, 0, 0},
            {0, 0, 0, 0},
            {0, 0, 0, 0},
            {0, 0, 0, 1}
        };
        System.out.println(solution.findMaxFish(grid2)); // Expected: 1
    }
}
