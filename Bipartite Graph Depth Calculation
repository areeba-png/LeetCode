import java.util.*;

public class Solution {
    public int magnificentSets(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        int[] color = new int[n + 1];
        Arrays.fill(color, -1);
        boolean[] visited = new boolean[n + 1];
        int maxGroups = 0;

        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                List<Integer> component = new ArrayList<>();
                if (!bfsCheckBipartite(graph, color, visited, i, component)) {
                    return -1; // Not bipartite, impossible to divide into groups
                }
                maxGroups += findMaxDepth(graph, component);
            }
        }
        return maxGroups;
    }

    private boolean bfsCheckBipartite(List<List<Integer>> graph, int[] color, boolean[] visited, int start, List<Integer> component) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        color[start] = 0;
        visited[start] = true;
        component.add(start);
        
        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int neighbor : graph.get(node)) {
                if (color[neighbor] == -1) {
                    color[neighbor] = 1 - color[node]; // Alternate colors
                    visited[neighbor] = true;
                    component.add(neighbor);
                    queue.offer(neighbor);
                } else if (color[neighbor] == color[node]) {
                    return false; // Odd cycle detected, not bipartite
                }
            }
        }
        return true;
    }

    private int findMaxDepth(List<List<Integer>> graph, List<Integer> component) {
        int maxDepth = 0;
        for (int node : component) {
            maxDepth = Math.max(maxDepth, bfsLayerDepth(graph, node));
        }
        return maxDepth;
    }

    private int bfsLayerDepth(List<List<Integer>> graph, int start) {
        Queue<Integer> queue = new LinkedList<>();
        Map<Integer, Integer> level = new HashMap<>();
        queue.offer(start);
        level.put(start, 1);
        int maxDepth = 1;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int neighbor : graph.get(node)) {
                if (!level.containsKey(neighbor)) {
                    level.put(neighbor, level.get(node) + 1);
                    maxDepth = Math.max(maxDepth, level.get(neighbor));
                    queue.offer(neighbor);
                }
            }
        }
        return maxDepth;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int n = 6;
        int[][] edges = {{1,2}, {1,4}, {1,5}, {2,6}, {2,3}, {4,6}};
        System.out.println(solution.magnificentSets(n, edges)); // Expected output: 4
    }
}
